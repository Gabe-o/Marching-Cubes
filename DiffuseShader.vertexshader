// Vertex
#version 400

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;

out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

uniform mat4 MVP;
uniform mat4 V;
uniform vec3 LightDirection_worldspace;

void main(){
    gl_Position =  MVP * vec4(vertexPosition_modelspace, 1);

    vec3 vertexPosition_cameraspace = ( V * vec4(vertexPosition_modelspace,1)).xyz;
    EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

    LightDirection_cameraspace = ( V * vec4(LightDirection_worldspace, 1)).xyz;
    LightDirection_cameraspace = LightDirection_cameraspace + EyeDirection_cameraspace;

    Normal_cameraspace = ( V * vec4(vertexNormal_modelspace,0)).xyz;
}
